name: Deploy AI Search Booster

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  deploy-shopify-config:
    name: Deploy Shopify App Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Shopify CLI
        run: |
          echo "[ASB-CI] Installing Shopify CLI v3..."
          npm install -g @shopify/cli @shopify/app
          shopify version

      - name: Authenticate with Shopify
        run: |
          echo "[ASB-CI] Authenticating with Shopify Partners..."
          echo "${{ secrets.SHOPIFY_CLI_TOKEN }}" | shopify auth login --store aisearch-dev.myshopify.com
        env:
          SHOPIFY_CLI_TOKEN: ${{ secrets.SHOPIFY_CLI_TOKEN }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}

      - name: Deploy app configuration
        run: |
          echo "[ASB-CI] Deploying app configuration with proxy settings..."
          cat shopify.app.toml
          echo "[ASB-CI] Running shopify app deploy --force..."
          shopify app deploy --force
        env:
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}

      - name: Test app proxy endpoint
        run: |
          echo "[ASB-CI] Testing app proxy endpoint..."
          sleep 30  # Wait for proxy to be registered
          
          echo "[ASB-CI] Testing health endpoint via proxy..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://aisearch-dev.myshopify.com/apps/ai-search-booster/health" || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "[ASB-CI] ✅ App proxy is working! (HTTP $response)"
          else
            echo "[ASB-CI] ❌ App proxy failed (HTTP $response)"
            echo "[ASB-CI] Testing direct backend..."
            direct_response=$(curl -s -o /dev/null -w "%{http_code}" "https://ai-search-booster-backend.onrender.com/health" || echo "000")
            echo "[ASB-CI] Direct backend health: HTTP $direct_response"
            
            if [ "$response" != "200" ]; then
              echo "[ASB-CI] App proxy registration may have failed"
              exit 1
            fi
          fi

  test-dashboard:
    name: Test Dashboard Functionality
    runs-on: ubuntu-latest
    needs: deploy-shopify-config
    
    steps:
      - name: Test dashboard API calls
        run: |
          echo "[ASB-CI] Testing dashboard API functionality..."
          
          # Test products endpoint via proxy
          echo "[ASB-CI] Testing products API via app proxy..."
          products_response=$(curl -s "https://aisearch-dev.myshopify.com/apps/ai-search-booster/api/products?shop=aisearch-dev.myshopify.com" || echo '{"error":"request_failed"}')
          echo "[ASB-CI] Products API response: $products_response"
          
          # Check if response contains products
          if echo "$products_response" | grep -q '"products"'; then
            echo "[ASB-CI] ✅ Products API working via app proxy!"
          else
            echo "[ASB-CI] ❌ Products API not working via app proxy"
            echo "[ASB-CI] Response: $products_response"
          fi
          
          # Test frontend accessibility
          echo "[ASB-CI] Testing frontend accessibility..."
          frontend_response=$(curl -s -o /dev/null -w "%{http_code}" "https://ai-search-booster-frontend.onrender.com/?shop=aisearch-dev.myshopify.com" || echo "000")
          echo "[ASB-CI] Frontend status: HTTP $frontend_response"
          
          if [ "$frontend_response" = "200" ]; then
            echo "[ASB-CI] ✅ Frontend is accessible!"
          else
            echo "[ASB-CI] ❌ Frontend not accessible (HTTP $frontend_response)"
          fi